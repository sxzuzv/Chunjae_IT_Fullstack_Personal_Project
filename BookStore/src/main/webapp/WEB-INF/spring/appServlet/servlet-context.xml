<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:context="http://www.springframework.org/schema/context"
             xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->

    <!-- Enables the Spring MVC @Controller programming model -->
    <annotation-driven enable-matrix-variables="true"/>

    <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
    <resources mapping="/resources/**" location="/resources/"/>

    <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
    <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <beans:property name="prefix" value="/WEB-INF/views/" />
        <beans:property name="suffix" value=".jsp" />
    </beans:bean>

    <context:component-scan base-package="com.springmvc.*" />
    <resources mapping="/resources/**" location="/resources/" />
    <!--스프링의 멀티파트 기능을 이용하기 위한 MultipartResolver 등록-->
    <beans:bean id="multipartResolver"
                class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <beans:property name="maxUploadSize" value="10240000" />
    </beans:bean>

    <!-- 생성한 Interceptor 객체를 등록한다. -->
    <interceptors>
        <beans:bean class="com.springmvc.interceptor.MonitoringInterceptor" />
        <beans:bean class="com.springmvc.interceptor.AuditingInterceptor" />
    </interceptors>
    <!--<beans:property name="defaultEncoding" value="utf-8"/>
    <beans:property name="uploadTempDir" ref="uploadDirResource"/>-->

    <!--<beans:bean id="uploadDirResource" class="org.springframework.core.io.FileSystemResource">
        <beans:constructor-arg value="c/upload" />
    </beans:bean>-->

    <!--	<context:component-scan base-package="com.springmvc.controller" />를 변경-->
    <!--속성의 공통값으로 변경 -> *(Wild Card 문자)-->

    <beans:bean id= "messageSource"
                class="org.springframework.context.support.ResourceBundleMessageSource">
        <beans:property name="basename" value="messages"/>
        <beans:property name="defaultEncoding" value="UTF-8" />
    </beans:bean>

    <!-- 기존 validator와 추후 정의한 bookValidator가 충돌하는 문제를 해결하기 위해 primary="true" 속성을 추가한다. -->
    <beans:bean id="validator"  primary="true" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <beans:property name="validationMessageSource" ref="messageSource" />
    </beans:bean>

    <beans:bean id="unitsInStockValidator"
                class="com.springmvc.validator.UnitsInStockValidator"/>
    <beans:bean id="bookValidator" class="com.springmvc.validator.BookValidator">
        <beans:property name = "springValidators">
            <beans:set>
                <beans:ref bean = "unitsInStockValidator"/>
            </beans:set>
        </beans:property>
    </beans:bean>

    <resources mapping="/upload/**" location="file:///C:/upload/" />


</beans:beans>